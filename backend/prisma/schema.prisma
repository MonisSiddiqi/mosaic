// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.VarChar(36)

  email           String  @unique
  password        String
  isEmailVerified Boolean @default(false)
  isActive        Boolean @default(true)

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  UserProfile UserProfile?
  Project     Project?
}

model UserProfile {
  id String @id @default(uuid()) @db.VarChar(36)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.VarChar(36)

  name String

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz
}

model Service {
  id String @id @default(uuid()) @db.VarChar(36)

  icon        String?
  title       String
  description String

  updatedAt DateTime  @updatedAt @db.Timestamptz
  createdAt DateTime  @default(now()) @db.Timestamptz
  Project   Project[]
}

model Project {
  id String @id @default(uuid()) @db.VarChar(36)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @unique @db.VarChar(36)
  Service   Service? @relation(fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  serviceId String?

  title          String
  description    String
  budget         Decimal? @db.Decimal(10, 2)
  budgetCurrency String   @default("USD") @db.VarChar(3)

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  ProjectTag      ProjectTag[]
  siteMeasurement SiteMeasurement?
  Address         Address?
  ProjectImage    ProjectImage[]
}

model SiteMeasurement {
  id String @id @default(uuid()) @db.VarChar(36)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String  @unique @db.VarChar(36)

  length Decimal? @db.Decimal(10, 2)
  width  Decimal? @db.Decimal(10, 2)
  height Decimal? @db.Decimal(10, 2)
  area   Decimal? @db.Decimal(10, 2)
  unit   String   @default("METER")

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz
}

model Address {
  id String @id @default(uuid()) @db.VarChar(36)

  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId String  @db.VarChar(36)
  state     State   @relation(fields: [stateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stateId   String  @db.VarChar(36)
  city      City    @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cityId    String  @db.VarChar(36)

  line1      String
  line2      String?
  postalCode String

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String  @unique @db.VarChar(36)

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  @@index([countryId, stateId, cityId])
}

model Country {
  id String @id @default(uuid()) @db.VarChar(36)

  name String @unique
  code String @unique

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  State   State[]
  Address Address[]
}

model State {
  id String @id @default(uuid()) @db.VarChar(36)

  countryId String
  country   Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  name String

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  City    City[]
  Address Address[]

  @@unique([countryId, name])
  @@index([countryId])
}

model City {
  id String @id @default(uuid()) @db.VarChar(36)

  state   State  @relation(fields: [stateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stateId String @db.VarChar(36)

  name String

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  Address Address[]

  @@unique([stateId, name])
  @@index([stateId])
}

model Tag {
  id String @id @default(uuid()) @db.VarChar(36)

  name String @unique

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  projects ProjectTag[]
}

model ProjectTag {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String  @db.VarChar(36)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     String  @db.VarChar(36)

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  @@id([projectId, tagId])
  @@index([projectId])
  @@index([tagId])
}

model ProjectImage {
  id String @id @default(uuid()) @db.VarChar(36)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String  @db.VarChar(36)

  url  String
  type ProjectImageType

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz
}

enum ProjectImageType {
  BEFORE
  AFTER
}
