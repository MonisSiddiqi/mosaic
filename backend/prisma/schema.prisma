// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.VarChar(36)

  email           String   @unique
  password        String
  isEmailVerified Boolean  @default(false)
  isActive        Boolean  @default(true)
  role            UserRole @default(USER)

  UserProfile UserProfile?
  projects    Project[] // Projects they created
  reviews     Review[] // Reviews they've received

  // Vendor-specific fields
  vendorTags     VendorTag[]
  vendorServices VendorService[]
  submittedBids  Bid[]
  Address        Address?

  updatedAt     DateTime        @updatedAt @db.Timestamptz
  createdAt     DateTime        @default(now()) @db.Timestamptz
  ProjectUpdate ProjectUpdate[]
  Testimonial   Testimonial[]
  Otp           Otp?
  LoginHistory  LoginHistory[]
}

model UserProfile {
  id String @id @default(uuid()) @db.VarChar(36)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique @db.VarChar(36)

  name  String
  image String?

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz
}

model LoginHistory {
  id        String   @id @default(uuid()) @db.VarChar(36)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String   @db.VarChar(36)
  status    Boolean  @default(false)
  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz
}

model Service {
  id String @id @default(uuid()) @db.VarChar(36)

  iconUrl     String?
  name        String  @unique
  description String

  updatedAt     DateTime        @updatedAt @db.Timestamptz
  createdAt     DateTime        @default(now()) @db.Timestamptz
  Project       Project[]
  VendorService VendorService[]
}

model Project {
  id String @id @default(uuid()) @db.VarChar(36)

  user      User     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String   @db.VarChar(36)
  Service   Service? @relation(fields: [serviceId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  serviceId String?
  Address   Address? @relation(fields: [addressId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  addressId String?  @db.VarChar(36)

  title       String
  description String
  status      ProjectStatus @default(IN_PROGRESS)
  preference  Preference?

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  SiteMeasurement SiteMeasurement?
  ProjectTag      ProjectTag[]
  Review          Review[]
  ProjectImage    ProjectImage[]
  Bid             Bid[]
  ProjectUpdate   ProjectUpdate[]

  @@index([userId])
}

model SiteMeasurement {
  id String @id @default(uuid()) @db.VarChar(36)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String  @unique @db.VarChar(36)

  length Decimal? @db.Decimal(10, 2)
  width  Decimal? @db.Decimal(10, 2)
  height Decimal? @db.Decimal(10, 2)
  area   Decimal? @db.Decimal(10, 2)
  unit   String   @default("METER")

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz
}

model Address {
  id     String  @id @default(uuid()) @db.VarChar(36)
  // Relation to User for vendor address
  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String? @unique @db.VarChar(36)

  line1      String
  line2      String?
  country    String
  state      String
  city       String
  postalCode String

  updatedAt DateTime  @updatedAt @db.Timestamptz
  createdAt DateTime  @default(now()) @db.Timestamptz
  Project   Project[]
}

model Tag {
  id String @id @default(uuid()) @db.VarChar(36)

  name String @unique

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  projects  ProjectTag[]
  VendorTag VendorTag[]
}

model ProjectTag {
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String  @db.VarChar(36)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId     String  @db.VarChar(36)

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  @@id([projectId, tagId])
  @@index([projectId])
  @@index([tagId])
}

model ProjectImage {
  id String @id @default(uuid()) @db.VarChar(36)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String  @db.VarChar(36)

  url  String
  type ImageType

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz
}

model Bid {
  id String @id @default(uuid()) @db.VarChar(36)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @db.VarChar(36)

  vendor   User      @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId String    @db.VarChar(36)
  status   BidStatus @default(PENDING)

  proposalMessage    String?
  proposalAttachment String?

  updatedAt     DateTime        @updatedAt @db.Timestamptz
  createdAt     DateTime        @default(now()) @db.Timestamptz
  BidAttachment BidAttachment[]
}

model BidAttachment {
  id String @id @default(uuid()) @db.VarChar(36)

  bid   Bid    @relation(fields: [bidId], references: [id], onDelete: Cascade)
  bidId String @db.VarChar(36)

  url         String
  name        String
  description String?

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  @@index([bidId])
}

model ProjectUpdate {
  id String @id @default(uuid()) @db.VarChar(36)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @db.VarChar(36)

  Vendor   User?   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId String? @db.VarChar(36)

  comment String

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz
}

model Review {
  id String @id @default(uuid()) @db.VarChar(36)

  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String  @db.VarChar(36)

  vendor   User   @relation(fields: [vendorId], references: [id], onDelete: Cascade)
  vendorId String @db.VarChar(36)

  rating      Int // 1-5 stars
  comment     String?
  isPublished Boolean @default(true)

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  @@index([projectId])
  @@index([vendorId])
}

model VendorTag {
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.VarChar(36)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String @db.VarChar(36)

  updatedAt DateTime @updatedAt @db.Timestamptz
  createdAt DateTime @default(now()) @db.Timestamptz

  @@id([userId, tagId])
  @@index([userId])
  @@index([tagId])
}

model VendorService {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String  @db.VarChar(36)
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId String  @db.VarChar(36)

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@id([userId, serviceId])
  @@index([userId])
  @@index([serviceId])
}

model Testimonial {
  id String @id @default(uuid()) @db.VarChar(36)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.VarChar(36)

  rating      Int
  title       String
  description String

  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt @db.Timestamptz

  @@index([userId])
}

model Otp {
  id              String   @id @default(uuid()) @db.VarChar(36)
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  type            OtpType
  userId          String   @unique @db.VarChar(36)
  oneTimePassword String
  isVerified      Boolean  @default(false)
  updatedAt       DateTime @updatedAt
  createdAt       DateTime @default(now())
}

enum OtpType {
  REGISTRATION
  FORGOT_PASSWORD
}

enum ImageType {
  BEFORE
  AFTER
}

enum MeasurementUnit {
  METER
  FEET
  YARD
  SQUARE_METER
  SQUARE_FEET
}

enum ProjectStatus {
  IN_PROGRESS
  AWARDED
  COMPLETED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum UserRole {
  USER
  VENDOR
  ADMIN
}

enum Preference {
  HIGH_QUALITY
  LOW_PRICE
}
